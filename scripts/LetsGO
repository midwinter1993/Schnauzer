#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Oops

Usage:
    LetsGO dlocate <race_file>
    LetsGO memcheck <mem_trace_file> <addr>
\
    LetsGO settle <benchmark_name>
    LetsGO detect <detect_dir> <sched>
\
    LetsGO racesum <detect_dir> <sched>
    LetsGO showsum <detect_dir> <sched>
    LetsGO clean <detect_dir> <sched>
    LetsGO disclean <detect_dir> <sched>
    LetsGO racediff <tot_race_dir>
    LetsGO showrace <tot_race_fpath>
    LetsGO plot <summary_dir>
\
    LetsGO chglib <runtime_lib_name>
    LetsGO (-h | --help)
    LetsGO --version
\
Options:
    -h --help     Show this screen.
    -v --version  Show version.
"""

import docopt
import re
import os

import utils
from utils import PROJ_DIR

from Command import CommandTable

from Race import RaceDetector
from Race import RaceFile
from Race import InstRace
from Race import RaceFileManager
from MemTrace import MemTrace
from SrcInfo import SrcInfoDB

import matplotlib.pyplot as plt

cmd_table = CommandTable()


def set_env(arguments):
    dirs = None
    for k in ('<race_file>', '<detect_dir>',
              '<mem_trace_file>', '<tot_race_fpath>'):
        if arguments[k]:
            dirs = arguments[k].split('/')

    if dirs:
        #  logs/benchmark-name/...
        idx = dirs.index('logs')
        d = '/'.join(dirs[0:idx+2])
        os.environ['LN_CONFIG'] = os.path.join(PROJ_DIR, d, 'LN.yaml')
        os.environ['SRCINFO_DB'] = os.path.join(PROJ_DIR, d, 'srcinfo/info.db')


@cmd_table.collect
def detect(arguments):
    detect_dir = arguments['<detect_dir>']
    sched = arguments['<sched>']

    assert check_sched(sched)

    detector = RaceDetector()
    detector.detect(detect_dir, sched)


@cmd_table.collect
def dlocate(arguments):
    race_file = RaceFile(arguments['<race_file>'])
    race_file.showSrcInfo()


@cmd_table.collect
def memcheck(arguments):
    mem_trace_file = arguments['<mem_trace_file>']
    addr = arguments['<addr>']
    mem_trace = MemTrace(mem_trace_file)
    if addr == 'all':
        mem_trace.showAllTrace()
    else:
        mem_trace.checkAddr(int(addr))


def change_runtime_lib(lib_name):
    os.chdir('bin')
    lib_path = 'lib' + lib_name + '.so'
    if not os.path.exists(lib_path):
        print 'Runtime lib:', lib_path, 'not exists'
        return
    target_lib_path = 'libruntime.so'
    if os.path.exists(target_lib_path) and os.path.islink(target_lib_path):
        print 'Update runtime lib link'
        utils.shell_exec('ln -sf %s %s' % (lib_path, target_lib_path))
    else:
        print 'Create runtime lib link'
        utils.shell_exec('ln -s %s %s' % (lib_path, target_lib_path))


@cmd_table.collect
def chglib(arguments):
    runtime_lib_name = arguments['<runtime_lib_name>'].lower()
    change_runtime_lib(runtime_lib_name)


@cmd_table.collect
def settle(arguments):

    PROJ_DIR = os.path.abspath(os.curdir)
    LOG_DIR = os.path.join(PROJ_DIR, 'logs')

    benchmark_name = arguments['<benchmark_name>']
    benchmark_log_dir = os.path.join(LOG_DIR, benchmark_name)
    ln_config_path = os.path.join(benchmark_log_dir, 'LN.yaml')

    if not os.path.exists(benchmark_log_dir):
        print 'Create benchmark log dir', benchmark_log_dir
        utils.shell_exec('mkdir -pv %s' % benchmark_log_dir)
        utils.shell_exec('mkdir -pv %s' % os.path.join(benchmark_log_dir,
                                                       'srcinfo'))

        ln_config = utils.yaml_load('scripts/LN.yaml')
        ln_config['INFO']['PROJ_DIR'] = PROJ_DIR
        ln_config['INFO']['NAME'] = benchmark_name
        ln_config['INFO']['LOG_DIR'] = LOG_DIR
        utils.yaml_dump(ln_config_path, ln_config)


def summary_path(detect_dir, sched):
    summary_dir = detect_dir.replace('/detect', '/summary')

    if not os.path.exists(summary_dir):
        os.makedirs(summary_dir)
    for f in list_dir(detect_dir, ext='.race'):
        # tmp: [prog_name, date, time, sched_name]
        tmp = os.path.splitext(os.path.basename(f))[0].split('_')
        if  sched is not None:
            tot_race_fpath = '%s_%s' % (tmp[0], sched)
        else:
            tot_race_fpath = '%s_%s' % (tmp[0], tmp[3])
        return os.path.join(summary_dir, tot_race_fpath)


def check_sched(sched):
    if sched.upper() not in ('PCT', 'SCS', 'NORMAL', 'PROFILE'):
        print 'Unknown scheduler', sched
        return False
    return True


@cmd_table.collect
def racesum(arguments):
    detect_dir = arguments['<detect_dir>']
    sched = arguments['<sched>']

    assert check_sched(sched)

    detector = RaceDetector()
    detector.detect(detect_dir, sched)

    rf_mngr = RaceFileManager()
    rf_mngr.loadTotalRaceFile(detect_dir, sched)
    rf_mngr.saveInfo(summary_path(detect_dir, sched))

    #  threshold = int(len(tot_race_file) * ratio)
    threshold = 2
    #  nr_common_race = rf_mngr.filterCommonRace(threshold)

    # Dump diff race for each race file
    #  rf_mngr.showSummary()

    print '-----', sched, '-----'
    #  print 'COMMON RACE:', nr_common_race
    print '#TOTAL RACE FILE:', rf_mngr.nrRaceFile()
    #  print 'THRESHOLD:', threshold


@cmd_table.collect
def showsum(arguments):
    detect_dir = arguments['<detect_dir>']
    sched = arguments['<sched>']

    assert check_sched(sched)

    rf_mngr = RaceFileManager()
    rf_mngr.loadTotalRaceFile(detect_dir, sched)
    rf_mngr.saveInfo(summary_path(detect_dir, sched))

    #  print len(rf_mngr.nrAccDistinctRaceEachFile())
    #  print len(rf_mngr.nrDistinctRaceEachFile())

    if not os.environ.get('DISPLAY'):
        print rf_mngr.nrDistinctRaceEachFile()
        return

    fig = plt.figure(sched)
    plt.plot(rf_mngr.nrAccDistinctRaceEachFile(), label='# of Acc Race', marker='^')
    plt.plot(rf_mngr.nrDistinctRaceEachFile(), label='# of Distinct Race', marker='o')
    plt.plot(rf_mngr.nrNormalRaceEachFile(), label='# of Normal Race', marker='s')
    plt.plot(rf_mngr.nrTotalRaceEachFile(), label='# of Total Race', marker='p')
    #  print rf_mngr.nrDistinctRaceEachFile()
    #  print rf_mngr.nrNormalRaceEachFile()
    #  print rf_mngr.nrTotalRaceEachFile()
    plt.ylabel('#Inst Race')
    plt.legend(loc='best')

    benchmark_name = detect_dir.split('/')[1]
    #  plt.savefig('./bak/%s_%s_%s.png' % (utils.current_time(), benchmark_name, sched))

    plt.show()


@cmd_table.collect
def clean(arguments):
    detect_dir = arguments['<detect_dir>']
    sched = arguments['<sched>']

    assert check_sched(sched)

    for trace_file in list_dir(detect_dir, ext='.trace'):
        if sched not in trace_file:
            continue
        os.remove(trace_file)


@cmd_table.collect
def disclean(arguments):
    detect_dir = arguments['<detect_dir>']
    sched = arguments['<sched>']

    assert check_sched(sched)

    clean(arguments)

    for f in list_dir(detect_dir):
        if sched not in f:
            continue
        if f.endswith('.race') or f.endswith('.race-summary') or f.endswith('.trace'):
            os.remove(f)


@cmd_table.collect
def showrace(arguments):
    tot_race_fpath = arguments['<tot_race_fpath>']
    db = SrcInfoDB()
    with open(tot_race_fpath, 'r') as fd:
        for line in fd:
            inst_race = InstRace.parse(line)

            print inst_race

            src_info_1 = db.lookup(inst_race.first_inst_id_)
            src_info_2 = db.lookup(inst_race.second_inst_id_)

            print '=' * 90
            print inst_race.first_inst_id_, src_info_1,
            print '  X  ',
            print inst_race.second_inst_id_, src_info_2
            print '=' * 90


@cmd_table.collect
def racediff(arguments):
    tot_race_dir = arguments['<tot_race_dir>']

    pct_inst_race_set = set()
    scs_inst_race_set = set()
    for f in list_dir(tot_race_dir, ext='.tot-race'):
        if 'PCT' in f:
            s = pct_inst_race_set
        elif 'SCS' in f:
            s = scs_inst_race_set
        elif 'NORMAL' in f:
            continue
        else:
            print 'Error: Unknown tot inst race'
            return
        with open(f, 'r') as fd:
            for line in fd:
                s.add(InstRace.parse(line))

    diff_1 = scs_inst_race_set - pct_inst_race_set
    diff_2 = pct_inst_race_set - scs_inst_race_set
    print 'SCS', len(scs_inst_race_set)
    print 'PCT', len(pct_inst_race_set)
    print 'SCS - PCT', len(diff_1)
    print 'PCT - SCS', len(diff_2)


def plot_data(data, *args, **kargs):
    plt.plot(range(1, len(data)+1), data, **kargs)


@cmd_table.collect
def plot(arguments):
    summary_dir = arguments['<summary_dir>']
    arguments['<detect_dir>'] = summary_dir.replace('summary', 'detect')

    #  for sched in ('SCS', 'PCT', 'NORMAL'):
    for sched in ('SCS', 'PCT'):
        arguments['<sched>'] = sched
        racesum(arguments)

    for f in list_dir(summary_dir, ext='.tot-summary'):
            if 'PCT' in f:
                pct_tot_summary = utils.yaml_load(f)
            elif 'SCS' in f:
                scs_tot_summary = utils.yaml_load(f)
            elif 'NORMAL' in f:
                normal_tot_summary = utils.yaml_load(f)
            else:
                print f
                assert False

    #  if not os.environ.get('DISPLAY'):
        #  print 'SCS', scs_tot_summary['nr-total-race']
        #  print 'PCT', pct_tot_summary['nr-total-race']
        #  return

    fig_name = summary_dir.split('/')[1]
    ##########################################################
    #  fig = plt.figure(fig_name, figsize=(19.2, 9.8), dpi=100)

    #  plt.subplot(121)
    #  plot_data(scs_tot_summary['nr-total-race'], label='SCS', marker='^')
    #  plot_data(pct_tot_summary['nr-total-race'], label='PCT', marker='o')
    #  #  plot_data(normal_tot_summary['nr-total-race'], label='NORMAL', marker='s')

    #  plt.title('Total race')
    #  plt.xlabel('# of Trace')
    #  plt.ylabel('# of Inst Race')
    #  plt.legend(loc='best')

    #  plt.subplot(122)
    #  plot_data(scs_tot_summary['nr-acc-distinct-race'], label='SCS', marker='^')
    #  plot_data(pct_tot_summary['nr-acc-distinct-race'], label='PCT', marker='o')
    #  #  plot_data(normal_tot_summary['nr-acc-distinct-race'], label='NORMAL', marker='s')

    #  plt.title('Acc distinct race')
    #  plt.xlabel('# of Trace')
    #  plt.ylabel('# of Inst Race')
    #  plt.legend(loc='best')

    #  #  plt.savefig('./plots/%s_%s_SCS-vs-PCT.png' % (utils.current_time(), fig_name))
    #  plt.show()
    ##########################################################

    with open('./plots/%s_%s.dat' % (fig_name, utils.current_time()), 'w') as fd:
        s = '%5s %20s %30s %20s %30s' % ('num', 'scs-total-race',
                                         'scs-acc-distinct-race',
                                         'pct-total-race',
                                         'pct-acc-distinct-race')
        fd.write(s);
        fd.write('\n')
        l = max(len(scs_tot_summary['nr-total-race']),
                len(scs_tot_summary['nr-acc-distinct-race']),
                len(pct_tot_summary['nr-total-race']),
                len(pct_tot_summary['nr-acc-distinct-race']))

        utils.extend_list(scs_tot_summary['nr-total-race'], l)
        utils.extend_list(scs_tot_summary['nr-acc-distinct-race'], l)
        utils.extend_list(pct_tot_summary['nr-total-race'], l)
        utils.extend_list(pct_tot_summary['nr-acc-distinct-race'], l)

        for i in xrange(l):
            s = '%5d %20d %30d %20d %30d' % (
                i,
                scs_tot_summary['nr-total-race'][i],
                scs_tot_summary['nr-acc-distinct-race'][i],
                pct_tot_summary['nr-total-race'][i],
                pct_tot_summary['nr-acc-distinct-race'][i])
            fd.write(s);
            fd.write('\n')
            #  print s


if __name__ == "__main__":
    arguments = docopt.docopt(__doc__, version='Oops 0.0.0')

    set_env(arguments)
    cmd_table.run(arguments)
